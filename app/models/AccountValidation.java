package models;

import java.util.Date;
import java.util.List;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.ManyToOne;

import play.db.ebean.Model;
import play.mvc.PathBindable;
import utils.GenerateCode;

import com.avaje.ebean.Page;

@Entity
public class AccountValidation extends Model implements PathBindable<AccountValidation>{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Id
	public int idAccountValidation;
	
	public Date addDate;
	public String codeGenerated;
	public boolean isActivated;
	public String personActivate;
	
	/**
	 *  This Code belongs to the user who generate, it means that when a user
	 *  succeed to sign up with this code
	 *  This user will receive a bonus
	 *   It is not important to know who user this code though (the new user who
	 *   want to sign up)*/
	@ManyToOne
	public User user;

	public static Finder<Integer, AccountValidation> find = new Finder<Integer, AccountValidation>(
			Integer.class, AccountValidation.class);

	public static AccountValidation findById(int id) {
		return find.byId(id);
	}
	
	public static Page<AccountValidation> find(int page){
		return find.where()
				.orderBy("id_account_validation asc")
				.findPagingList(10)
				.setFetchAhead(false)
				.getPage(page);
	}

	public static String generateCode() {
		return GenerateCode.nextSessionId();
	}

	/**
	 * Find this code in database if it exists
	 * */
	public static AccountValidation checkCode(String code) {
		return find.where().eq("code_generated", code).findUnique();
	}
	
	
	
	/**
	 * Method used to confirm Code by new User. It does 2 things: 1/Allows new
	 * user to sign up id code validated 2/Increment the person who give this
	 * code
	 * */
	public static boolean confirmCode(String code) {
		AccountValidation account = checkCode(code);
		// Bonus Rule for Sponsor User
		BonusRule bonusForSponsor = BonusRule.findByID("1");
		if (account != null) {
			
			if (!account.isActivated) {
				if(!account.personActivate.equals("admin")){
					account.isActivated = true;
					account.user.bonus += bonusForSponsor.bonus;
					account.user.update();
					account.update();
				}
				else{
					account.isActivated = true;
					account.update();
				}
			} 
			else return false;
		}else return false;
		
		return true;
	}

	public static List<AccountValidation> findAccountByUser(String userName) {
		return find
				.where()
				.eq("user_user_name", userName)
				.eq("is_activated", false)
				.findList();
	}
	/**
	 * Method check if codes generated by user is lower than 4
	 * */
	public static boolean countList(String userName){
		return find
				.where()
				.eq("user_user_name", userName)
				.eq("is_activated", false)
				.findList().
				size() < 3 ? true : false;
	}
	/**
	 * Method saveCode in Database used by Generate Button
	 * 
	 * */
	public static boolean saveCode(User user, String codePosted) {
		if(countList(user.userName)){
			AccountValidation av = new AccountValidation();
			
			av.user = user;
			av.personActivate = "user";
			av.codeGenerated = codePosted;
			av.addDate = new Date();
			av.save();
			return true;
		}
		else{
			return false;
		}
	}

	@Override
	public AccountValidation bind(String key, String value) {
		return findById(Integer.parseInt(value));
	}

	@Override
	public String javascriptUnbind() {
		return String.valueOf(this.idAccountValidation);
	}

	@Override
	public String unbind(String arg0) {
		return String.valueOf(this.idAccountValidation);
	}
}
